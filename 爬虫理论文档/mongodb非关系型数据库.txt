启动:sudo service mongod start
停止:sudo service mongod stop
重启:sudo service mongod restart
配置文件的位置: /etc/mongod.conf
日志的位置: /var/log/mongodb/mongod.log
默认端口:27017


启动方式2
启动:sudo mongod [--dbpath=dbpath --logpath=logpath --append -fork][-f logfile]
只以 sudo mongod 命令启动时,默认将数据存放在了/data/db目录下,需要手动创建
--dbpath:指定数据库的存放路径
--logpath:指定日志的存放路径
--logappend:设置日志的写入形式为追加模式
--fork:开启新的进程运行mongodb服务
f:配置文件(可以将上述配置信息写入文件然后通过本参数进行加载启动)


开启客户端:mongo
-------------------------
MongoDB的数据库的操作

查看默认的数据库:db
查看所有的数据库:show dbs
创建集合(表):db.createCollection('db_table_name')
切换数据库:use dbname
删除数据库:1.usr dbname, 2.db.dropDatabase()

-------------------------
MongoDB的集合(表)的操作

创建集合:db.createCollection()
创建内容(文档):db.xx.insert({})---js字典的格式填入
删除集合:db.xx.drop()
查询所有表:show collections
内容:db.xx.find()


-------------------------
文档数据增删改

增加:
	1.1直接增加	db.xx.insert({})
	1.2先字典 再增加
			stu_info = {
				name:"小明",
				age:12,
				gender:true,
				height:168,
					}
			db.xx.insert(stu_info)
删除:	默认删除所有符合条件的数据:db.xx.remove({删除条件})
	只想删除符合条件的一个数据:db.xx.remove({删除条件},{justOne:true})
	删除所有的数据:db.xx.remove({})--小括号内必须要传一个参数,因此传入一个空字典

修改:	db.xx.update(查询条件,修改内容)
	1.默认修改或者新增字段,其它的字段删除了
	2.只修改或增加 原有的字段;其它字段不变 保留  $set
	db.xx.update({找},{$set:{}})
	3.只要符合条件 都修改 字段 multi
	4.删除字段 $unset
.

查询:
	1.基本查询:db.xx.find()
	2.指定条件查询:db.xx.find({查询条件})
	3.只查询一个:db.xx.findOne({查询条件})

逻辑查询:$gt  $gte  $lt  $lte  $ne
	1.大于:db.xx.find({条件:{$gt:值}})
	2.大于等于:db.xx.find({条件:{$gte:值}})
	3.小于:db.xx.find({条件:{$lt:值}})
	4.小于等于:db.xx.find({条件:{$lte:值}})
	5.不等于:db.xx.find({条件:{$ne:值}})


	$and     $or
	默认find的多条件 就是 $and:db.xx.find({条件1:值1,条件2:值2})
	db.xx.find({$and:[{条件1:值1},{条件2:值2}]})
	db.xx.find({$or:[{条件1:值1},{条件2:值2}]})
	db.xx.find({$and:[{$or:[{条件1:值1},{条件2:值2}]},{条件3:值3}]})
 

	范围运算  $in  $nin
	db.xx.find({条件1:{$in:[值1,值2]}})表示在条件1的值1和值2的范围间
	db.xx.find({条件1:{$nin:[值1,值2]}})表示不在条件1的值1和值2的范围间


	正则
	db.xx.find({字段:'正则表达式'})
	db.xx.find({条件1:/值1/})值为值1的模糊查询
	db.xx.find({条件1:/值1/i})加i是表示不区分大小写
	db.xx.find({条件1:{$regex:"值1"}})
	db.xx.find({条件1:{$regex:"值1",$options:"i"}})加i是表示不区分大小写




	自定义函数  $where
	db.xx.find({$where:匿名函数带返回值})
	db.xx.find({$where:function(){return this.条件})


	skip跳过几个显示:db.xx.find().skip(跳过的个数)
	limit允许显示几个:db.xx.find().limit(允许显示的个数)


	投影:db.xx.find({gender:true},{条件1:true,条件2:true})gender必须单独拿出来设置



	排序:  -1是降序  1是升序
	db.xx.find().sort({条件1:-1,条件2:-1})

	统计个数:count
	db.xx.find().count()其中find()可省略不写
	db.xx.count({条件1:值1})

	去重:db.xx.distinct('条件',{})


	聚合查询:db.xx.aggregate([{管道1},{管道2}])
	$group分组:db.xx.aggregate([{$group:{_id:"条件"}},])

	$sum  $svg  $first  $last  $max  $min  $push

	

	match与find的区别:match是配合管道使用的
	db.xx.find({age:{$gt:20}})
	db.xx.aggregate(
		{
			$match:{age:{$gt:20}}
		}
	)



	$project:投影取出部分字段  显示写1,不显示就不管,千万不要写0
	db.stu.aggregate(
		{$match:{age:{$gt:20}}},
		{$group:{_id:"$hometown",age_sum:{$sum:"$age"}}},
		{$project:{age_sum:1}}	
	)



MongoDB的索引操作:
for(var index = 0; index < 200000; index++) {
	db.stus.insert({
		_id:index,
		name:"name"+index,
		age:index
	})
}



查看数据的时间  对比  毫秒
db.xx.find().explatin('executionStats')
	查看_id:db.time.find({_id:18888}),explain('executionStats')
	查看name:db.time.find({name:"name18888"}).explain('executionStats')
	查看age  121毫秒--0毫秒:db.time.find({age:18888}),explain('executionStats')


设置ID索引ensureIndex
	db.time.ensureIndex({name:1})
	db.time.ensureIndex({age:1})

查询所有的索引:db.time.getIndexes()

删除 自定义的索引:db.time.dropIndex('name_1')

	
---------------------------------------------------
mongodb中常见的数据类型
Object ID:文档ID
String:字符串,最常用,必须是有效的UTF-8
Integer:整数可以是32位或64位,取决于服务器
Double:存储浮点值
Arrays:数组或列表,多个值存储到一个键
Object:用于嵌入式的文档,即一个值存储到一个文档
Null:存储null值
Timestamp:时间戳,表示从1970-1-1到现在的总秒数
Date:存储当前日期或时间的UNIX时间格式
----------------------------------------------------

注意点:
每个文档都有一个属性,为_id,保证每个文档的唯一性,mongodb默认使用_id作为主键,
可以自己去设置_id插入文档,如果没有提供,那么MongoDB为每个文档提供了一个独特的_id,类型为objectID
objectID是一个12字节的十六进制数,每个字节两位,一共是24位的字符串;前4个字节为当前时间戳,接下来3个字节的机器ID,接下来的2个字节中MongoDB的服务进程id,最后3个字节是简单的增量值





MongoDB的备份和恢复
mongodump -h 127.0.0.1:27017 -d stu -o /Users/lpf/Desktop/mongosave
备份:mongodump -h -d -o
-h:host "IP:port"
-d:备份的数据库名字 db
-o:备份到哪里去

mongorestore -h 127.0.0.1:27017 -d newdbs --dir /Users/lpf/Desktop/mongosave
恢复:mongorestore -h -d --dir
-h:host
-d:恢复的数据的名字
--dir:从哪里恢复




数据的导出和导入

导出
mongoexport -h dbhost -d dbname -c colname -o filename --type json/csv -f field
mongoexport -h 127.0.0.1:27017 -d newdbs -c stu -o data.json
mongoexport -h 127.0.0.1:27017 -d newdbs -c stu -o data.csv --type csv -f name,age,hometown
-h:服务器地址
-d:数据库名
-c:集合名
-o:导出文件名
--type:文件类型 默认json格式 可选数据类型json,csv
-f:需要导出的字段,导出为json格式的数据时可以不指定导出哪些字段,默认全部,导出成csv文件



导入
mongoimport -d dbname -c collectionname --file filename --headerline --type json/csv -f field
-d:数据库名
-c:collection名
--type:导入的格式默认json
-f:导入的字段名
--headerline:如果导入的格式是csv,则可以使用第一行的标题作为导入的字段
--file:要导入的文件


-------------------------------------
python和mongoDB的交互


import pymongo
import json

if __name__ == '__main__':
    #1.链接数据库
    client = pymongo.MongoClient(host="17.0.0.1", port=27017)
    
    #2.建库
    db = client['pystu']

    #3.建表
    collection = db['python']
    #collection = client['pystu']['python']
    #collection = client.pystu.python

    #4.把json文件的数据 插入到数据库insert()
    data_list = json.load(open('test.json', 'r'))
    collection.insert(data_list)
    
    #5.关闭
    client.close()
-----------------------------------------



权限控制

use admin
db.shutdownServer()
exit
sudo mongod
mongo
sudo mongod -auth

新建用户
use admin
db.createUser({user:'A',pwd:'123456',roles:['root']})
db.createUser({user:'A',pwd:'123456',roles:[{db:'test',role:'read'}]})

db.auth('A','123456')切换用户登录
删除用户:db.dropUser('A')