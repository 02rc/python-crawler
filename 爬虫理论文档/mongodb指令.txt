开启服务		sudo service mongod start/sudo mongod
停止服务		sudo service mongod stop
查看默认的数据库	db
查看所有的数据库	show dbs
查看所有的集合(表)	db.createCollection('db_table_name')
切换数据库		use dbname
删除数据库		use dbname;db.dropDatabase()
删除用户		db.dropUser('用户名')

创建超级用户:
use admin
db.creatUser({"user":"python","pwd":"python","roles":["root"]})
认证:
use admin
db.auth('python','python')


创建普通用户:
创建普通用户user1,该用户在test1上的权限是只读
use test1
db.createUser("user":"user1","pwd":"pwd1",roles:["read"])
创建普通用户user,该用户在test2上的权限是读写
use test2
db.createUser("user":"user1","pwd":"pwd2",roles:["readWrite"])
在其他数据库上创建普通用户
use admin
db.createUser({"user":"pyton1","pwd":"python1",role:[{"role":"read","db":"dbname1"},{"role":"readWrite","db":"dbname2"}]})



集合(表)的操作
创建集合		db.createCollection()
创建内容(文档)		db.xx.insert({})
查看表			use dbname;show collections
删除集合		ds.集合名.drop()
查询所有的内容		db.集合名.find()
检查集合是否有上限: 	db.集合名.isCapped()
mongodb的删除:
db.集合名称.remove(<query>,{justOne: <boolean>})
参数query:可选，删除的?档的条件
参数justOne:可选， 如果设为true或1， 则只删除?条， 默认false， 表示删除多条

		
db.createCollection(name,options)
db.createCollection("stu")
db.createCollection("sub", { capped : true, size : 10 } )
参数capped： 默认值为false表示不设置上限,值为true表示设置上限
参数size： 当capped值为true时， 需要指定此参数， 表示上限??,当?档达到上限时， 会将之前的数据覆盖， 单位为字节




Mongodb常见数据类型
Object ID： ?档ID
String： 字符串， 最常?， 必须是有效的UTF-8
Boolean： 存储?个布尔值， true或false
Integer： 整数可以是32位或64位， 这取决于服务器
Double： 存储浮点值
Arrays： 数组或列表， 多个值存储到?个键
Object： ?于嵌?式的?档， 即?个值为?个?档
Null： 存储Null值
Timestamp： 时间戳， 表示从1970-1-1到现在的总秒数
Date： 存储当前?期或时间的UNIX时间格式


db.stu.insert({name:'gj',gender:1})
db.stu.insert({_id:"20170101",name:'gj',gender:1})
插??档时， 如果不指定_id参数， MongoDB会为?档分配?个唯?的ObjectId


mongodb的保存:
db.集合名称.save(document) 
如果?档的_id已经存在则修改， 如果?档的_id不存在则添加


monggodb的更新:
db.集合名称.update(<query> ,<update>,{multi: <boolean>})
参数query:查询条件
参数update:更新操作符
参数multi:可选， 默认是false，表示只更新找到的第?条记录， 值为true表示把满?条件的?档全部更新

db.stu.update({name:'hr'},{name:'mnc'})           全文档进行覆盖更新
db.stu.update({name:'hr'},{$set:{name:'hys'}})    指定键值更新操作
db.stu.update({},{$set:{gender:0}},{multi:true})   更新全部
db.stu.update({},{$unset:{gender:0}})		  删除字段


注意:
每个?档都有?个属性， 为_id， 保证每个?档的唯?性，mongodb默认使用_id作为主键

可以??去设置_id插??档，如果没有提供， 那么MongoDB为每个?档提供了?个独特的_id， 类型为objectID

objectID是?个12字节的?六进制数,每个字节两位，一共是24 位的字符串： 前4个字节为当前时间戳 接下来3个字节的机器ID 接下来的2个字节中MongoDB的服务进程id 最后3个字节是简单的增量值





数据查询
find():
db.集合名称.find({条件})

findOne()：查询，只返回第1个
db.集合名称.findOne({条件})

pretty()： 将结果格式化
db.集合名称.find({条件}).pretty()



比较运算符:
等于： 默认是等于判断， 没有运算符
小于：$lt （less than）
小于等于：$lte （less than equal）
大于：$gt （greater than）
大于等于：$gte
不等于：$ne


逻辑运算符:
and:在json中写多个条件即可
查询年龄大于或邓毅18,并且性别为true的学生
db.stu.find({age:{$gte:18},gender:true})

or:使用$or,值为数组,数组中每个元素为json
查询年龄?于18， 或性别为false的学?
db.stu.find({$or:[{age:{$gt:18}},{gender:false}]})

查询年龄大于等于18或性别为男， 并且姓名是郭靖
db.stu.find({$or:[{age:{$gte:18}},{gender:true}],name:'gj'})




范围运算符
使用$in， $nin 判断数据是否在某个数组内

查询年龄为18、 28的学?
db.stu.find({age:{$in:[18,28,38]}})




支持正则表达式
使用//或$regex编写正则表达式 

查询sku以abc开头的数据
db.products.find({sku:/^abc/})

忽略大小写
db.stu.find({name:/lily/i})
db.stu.find({name:{$regex:"lily",$options:"i"}})

查询sku以789结尾的数据
db.products.find({sku:{$regex:'789$'}})
结果:
{ "_id" : 100, "sku" : "abc123", "description" : "Single line description." }
{ "_id" : 101, "sku" : "abc789", "description" : "First line\nSecond line" }
{ "_id" : 102, "sku" : "xyz456", "description" : "Many spaces before     line" }
{ "_id" : 103, "sku" : "xyz789", "description" : "Multiple\nline description" }






自定义查询*
由于mongo的shell是一个js的执行环境 使用$where后再写个函数， 返回满足条件的数据

 查询年龄大于30的学?
 db.stu.find({
     $where:function() {
         return this.age>30}
 })




 skip和limit
limit()： 用于读取指定数量的限制数量

  db.集合名称.find().limit(NUMBER)
  查询2条学?信息
  db.stu.find().limit(2)
skip()： 用于跳过指定数量

  db.集合名称.find().skip(NUMBER)
  db.stu.find().skip(2)
同时使用

  db.stu.find().limit(4).skip(5)
  或
  db.stu.find().skip(5).limit(4)
注意：先使用skip在使用limit的效率要高于前




投影:
在查询到的返回结果中， 只选择必要的字段

命令：db.集合名称.find({},{字段名称:1,...})

参数为字段与值， 值为1或是True表示显示， 值为0不显 特别注意： 对于_id列默认是显示的， 如果不显示需要明确设置为0

db.stu.find({},{_id:0,name:True,gender:True})



排序:
sort()， 用于对集合进行排序

命令：db.集合名称.find().sort({字段:1,...})

参数1为升序排列 参数-1为降序排列

 根据性别降序， 再根据年龄升序
 db.stu.find().sort({gender:-1,age:1})





统计个数:
count()用于统计结果集中总条数

命令：db.集合名称.find({条件}).count() 命令：db.集合名称.count({条件})

 db.stu.find({gender:true}).count()
 db.stu.count({age:{$gt:20},gender:true})




消除重复:
distinct()对数据进行去重

命令：db.集合名称.distinct('去重字段',{条件})

db.stu.distinct('hometown',{age:{$gt:18}})